apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ace-create-integration-server
  namespace: ace01-ci
spec:
  params:
    # --------------------------------------------------------------
    # details of the IntegrationServer to create
    # --------------------------------------------------------------
    - name: integration-name
      description: name to give the integration server name
      type: string
    - name: ace-namespace
      description: namespace to create the IntegrationServer in
      type: string
    # --------------------------------------------------------------
    # what flavour of App Connect to run
    #  for details, see https://www.ibm.com/docs/en/app-connect/containers_cd?topic=obtaining-app-connect-enterprise-server-image-from-cloud-container-registry
    # --------------------------------------------------------------
    - name: ace-server-version
      description: version of App Connect Enterprise to use
      type: string
    - name: ace-server-license
      description: ID of the license to use for the IntegrationServer
      type: string    
    - name: integration-tag
      description: docker tag to use for the integration image
      type: string
    # --------------------------------------------------------------
    # optional arguments
    #   scaling and resource limits
    # --------------------------------------------------------------
    - name: cpu-limit
      type: string
      default: "500m"
    - name: memory-limit
      type: string
      default: "500Mi"
    - name: replicas
      type: string
      default: "1"
    # --------------------------------------------------------------
    # optional arguments
    #   Configuration resources that can be added to
    #    the integration server
    # --------------------------------------------------------------
    - name: policies-configuration
      description: name of the policies project to use
      default: ""
      type: string
    - name: setdbparms-configuration
      description: name of the setdbparms configuration object to use
      default: ""
      type: string
    - name: datasource-configuration
      description: name of the data source object to use
      default: ""
      type: string
    - name: serverconf-configuration
      description: name of the server.conf.yaml configuration object to use
      default: ""
      type: string
    - name: truststore-configuration
      description: name of the truststore configuration object to use
      default: ""
      type: string
    # --------------------------------------------------------------

  workspaces:
    - name: output
      description: workspace with the resources

  steps:
    - name: run
      image: image-registry.openshift-image-registry.svc:5000/openshift/tools
      script: |
        #!/bin/sh

        set -e

        cd $(workspaces.output.path)

        ls -l

        echo "preparing configuration list"
        CONFIG=""
        if [ -n "$(params.policies-configuration)" ]; then
          POLICIES_CONFIG="- $(params.policies-configuration)"
          CONFIG="${CONFIG}$(params.policies-configuration),"
        fi
        if [ -n "$(params.setdbparms-configuration)" ]; then
          SETDBPARMS_CONFIG="- $(params.setdbparms-configuration)"
          CONFIG="${CONFIG}$(params.policies-configuration),"
        fi
        if [ -n "$(params.datasource-configuration)" ]; then
          DATASOURCE_CONFIG="- $(params.datasource-configuration)"
          CONFIG="${CONFIG}$(params.policies-configuration),"
        fi
        if [ -n "$(params.serverconf-configuration)" ]; then
          SERVERCONF_CONFIG="- $(params.serverconf-configuration)"
          CONFIG="${CONFIG}$(params.policies-configuration),"
        fi
        if [ -n "$(params.truststore-configuration)" ]; then
          TRUSTSTORE_CONFIG="- $(params.truststore-configuration)"
          CONFIG="${CONFIG}$(params.policies-configuration),"
        fi

        if [ -n "${CONFIG}" ]; then
          if [ "${CONFIG: -1}" = "," ]; then
            # Remove the last character (comma)
            CONFIG="${CONFIG%,}"
          fi
        fi
        CONFIG="[${CONFIG}]"

        echo "creating integration server"
        cat <<EOF > integrationserver.yaml
        apiVersion: appconnect.ibm.com/v1beta1
        kind: IntegrationServer
        metadata:
          name: $(params.integration-name)
          namespace: $(params.ace-namespace)
        spec:
          pod:
            containers:
              runtime:
                image: image-registry.openshift-image-registry.svc:5000/$(params.ace-namespace)/$(params.integration-name):$(params.integration-tag)
                resources:
                  limits:
                    cpu: $(params.cpu-limit)
                    memory: $(params.memory-limit)
          configurations: ${CONFIG}
          adminServerSecure: true
          createDashboardUsers: true
          designerFlowsOperationMode: disabled
          service:
            endpointType: http
          version: '$(params.ace-server-version)'
          enableMetrics: false
          license:
            accept: true
            license: $(params.ace-server-license)
            use: CloudPakForIntegrationNonProductionFREE
          replicas: $(params.replicas)
          router:
            timeout: 120s
        EOF

        ls -l
        cat integrationserver.yaml

        mv integrationserver.yaml ./gitops/environments/dev/ace01